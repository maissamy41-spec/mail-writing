"use client";

import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Loader2, Mail, Languages, Trash2, RotateCcw, Globe, Copy, Check } from "lucide-react";

export default function EmailTranslatorApp() {
  const [arabicText, setArabicText] = useState('');
  const [englishText, setEnglishText] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  
  // Form states
  const [emailStructure, setEmailStructure] = useState('');
  const [humanityLevel, setHumanityLevel] = useState('');
  const [tone, setTone] = useState('');
  const [formalityLevel, setFormalityLevel] = useState('');
  const [purpose, setPurpose] = useState('');
  const [sendTo, setSendTo] = useState('');
  
  // AI Detection states
  const [aiScoreBefore, setAiScoreBefore] = useState<number | null>(null);
  const [aiScoreAfter, setAiScoreAfter] = useState<number | null>(null);
  
  // Language state
  const [language, setLanguage] = useState('en');
  
  // Copy state
  const [isCopied, setIsCopied] = useState(false);
  
  // Subject state
  const [emailSubject, setEmailSubject] = useState('');

  const emailStructures = [
    { value: 'six_sigma', label: 'Six Sigma' },
    { value: 'storytelling', label: 'Story Telling' },
    { value: 'executive_summary', label: 'Executive Summary' },
    { value: 'action_oriented', label: 'Action Oriented' }
  ];

  const humanityLevels = [
    { value: 'very_human', label: 'Very Human' },
    { value: 'moderately_human', label: 'Moderately Human' },
    { value: 'slightly_human', label: 'Slightly Human' },
    { value: 'formal', label: 'Formal' }
  ];

  const tones = [
    { value: 'professional', label: 'Professional' },
    { value: 'friendly', label: 'Friendly' },
    { value: 'formal', label: 'Formal' },
    { value: 'casual', label: 'Casual' },
    { value: 'enthusiastic', label: 'Enthusiastic' },
    { value: 'diplomatic', label: 'Diplomatic' }
  ];

  const formalityLevels = [
    { value: 'very_formal', label: 'Very Formal' },
    { value: 'formal', label: 'Formal' },
    { value: 'semi_formal', label: 'Semi-Formal' },
    { value: 'informal', label: 'Informal' }
  ];

  const purposes = [
    { value: 'general', label: 'General' },
    { value: 'business', label: 'Business' },
    { value: 'inquiry', label: 'Inquiry' },
    { value: 'request', label: 'Request' },
    { value: 'complaints', label: 'Complaints' }
  ];

  const languages = [
    { value: 'en', label: 'English' },
    { value: 'ar', label: 'العربية' },
    { value: 'fr', label: 'Français' },
    { value: 'es', label: 'Español' },
    { value: 'de', label: 'Deutsch' }
  ];

  const sendToOptions = [
    { 
      value: 'service_modeling', 
      label: language === 'ar' ? 'فريق نمذجة الخدمات' : 'Service Modeling Team',
      description: language === 'ar' ? 'فريق مسؤول عن التغييرات في العمليات على النظام لجعلها مفيدة للعميل وإزالة التناقضات' : 'Team responsible for process changes on the system to make them beneficial to customers and remove contradictions'
    },
    { 
      value: 'commercial', 
      label: language === 'ar' ? 'الفريق التجاري' : 'Commercial Team',
      description: language === 'ar' ? 'فريق نرسل إليه عند وجود تطبيق يحتاج استثمار مالي أو له تكلفة على الشركة لإقناعهم بالفكرة والمميزات المالية' : 'Team we send to when there is an application that needs financial investment or has a cost to the company to convince them of the idea and financial advantages'
    }
  ];

  const getTranslation = (key: string) => {
    const translations: any = {
      en: {
        title: 'Email Translator & Enhancer',
        subtitle: 'Translate and enhance your emails from Arabic to English with full customization',
        emailSettings: 'Email Settings',
        arabicText: 'Arabic Text',
        arabicPlaceholder: 'Write your Arabic email here...',
        englishTranslation: 'English Translation',
        englishPlaceholder: 'The enhanced English email will appear here...',
        translateButton: 'Translate & Enhance Email',
        translating: 'Translating and enhancing...',
        aiDetectionAnalysis: 'AI Detection Analysis',
        aiScoreBefore: 'AI Score Before Humanization:',
        aiScoreAfter: 'AI Score After Humanization:',
        improvement: 'Improvement:',
        reduced: 'Reduced AI detection by',
        success: '✓ Success',
        needsAttention: '⚠ Needs attention',
        clearText: 'Clear Text',
        clearAll: 'Clear All',
        copyText: 'Copy Text',
        copied: 'Copied!',
        language: 'Language',
        selectLanguage: 'Select Language',
        selectStructure: 'Select email structure',
        selectHumanity: 'Select humanity level',
        selectTone: 'Select email tone',
        selectFormality: 'Select formality level',
        selectPurpose: 'Select purpose',
        selectTeam: 'Select target team'
      },
      ar: {
        title: 'مترجم ومحسن الإيميلات',
        subtitle: 'ترجم وحسن إيميلاتك من العربية إلى الإنجليزية مع تخصيص كامل',
        emailSettings: 'إعدادات الإيميل',
        arabicText: 'النص العربي',
        arabicPlaceholder: 'اكتب إيميلك باللغة العربية هنا...',
        englishTranslation: 'الترجمة الإنجليزية',
        englishPlaceholder: 'ستظهر الترجمة الإنجليزية المحسنة هنا...',
        translateButton: 'ترجم وحسن الإيميل',
        translating: 'جاري الترجمة والتحسين...',
        aiDetectionAnalysis: 'تحليل كشف الذكاء الاصطناعي',
        aiScoreBefore: 'نسبة الذكاء الاصطناعي قبل التحسين:',
        aiScoreAfter: 'نسبة الذكاء الاصطناعي بعد التحسين:',
        improvement: 'التحسين:',
        reduced: 'تم تقليل كشف الذكاء الاصطناعي بنسبة',
        success: '✓ نجح',
        needsAttention: '⚠ يحتاج انتباه',
        clearText: 'مسح النص',
        clearAll: 'مسح الكل',
        copyText: 'نسخ النص',
        copied: 'تم النسخ!',
        language: 'اللغة',
        selectLanguage: 'اختر اللغة',
        selectStructure: 'اختر هيكل الإيميل',
        selectHumanity: 'اختر مستوى الإنسانية',
        selectTone: 'اختر نبرة الإيميل',
        selectFormality: 'اختر مستوى الرسمية',
        selectPurpose: 'اختر الغرض',
        selectTeam: 'اختر الفريق المستهدف'
      },
      fr: {
        title: 'Traducteur et Améliorateur d\'E-mails',
        subtitle: 'Traduisez et améliorez vos e-mails de l\'arabe vers l\'anglais avec une personnalisation complète',
        emailSettings: 'Paramètres de l\'e-mail',
        arabicText: 'Texte Arabe',
        arabicPlaceholder: 'Écrivez votre e-mail en arabe ici...',
        englishTranslation: 'Traduction Anglaise',
        englishPlaceholder: 'L\'e-mail anglais amélioré apparaîtra ici...',
        translateButton: 'Traduire et Améliorer l\'E-mail',
        translating: 'Traduction et amélioration en cours...',
        aiDetectionAnalysis: 'Analyse de Détection IA',
        aiScoreBefore: 'Score IA Avant Humanisation:',
        aiScoreAfter: 'Score IA Après Humanisation:',
        improvement: 'Amélioration:',
        reduced: 'Détection IA réduite de',
        success: '✓ Succès',
        needsAttention: '⚠ Nécessite attention',
        clearText: 'Effacer le Texte',
        clearAll: 'Tout Effacer',
        copyText: 'Copier le Texte',
        copied: 'Copié!',
        language: 'Langue',
        selectLanguage: 'Sélectionner la Langue',
        selectStructure: 'Sélectionner la structure de l\'e-mail',
        selectHumanity: 'Sélectionner le niveau d\'humanité',
        selectTone: 'Sélectionner le ton de l\'e-mail',
        selectFormality: 'Sélectionner le niveau de formalité',
        selectPurpose: 'Sélectionner l\'objectif',
        selectTeam: 'Sélectionner l\'équipe cible'
      },
      es: {
        title: 'Traductor y Mejorador de Correos',
        subtitle: 'Traduce y mejora tus correos del árabe al inglés con personalización completa',
        emailSettings: 'Configuración del Correo',
        arabicText: 'Texto Árabe',
        arabicPlaceholder: 'Escribe tu correo en árabe aquí...',
        englishTranslation: 'Traducción al Inglés',
        englishPlaceholder: 'El correo mejorado en inglés aparecerá aquí...',
        translateButton: 'Traducir y Mejorar Correo',
        translating: 'Traduciendo y mejorando...',
        aiDetectionAnalysis: 'Análisis de Detección IA',
        aiScoreBefore: 'Puntuación IA Antes de Humanizar:',
        aiScoreAfter: 'Puntuación IA Después de Humanizar:',
        improvement: 'Mejora:',
        reduced: 'Detección IA reducida en',
        success: '✓ Éxito',
        needsAttention: '⚠ Necesita atención',
        clearText: 'Limpiar Texto',
        clearAll: 'Limpiar Todo',
        copyText: 'Copiar Texto',
        copied: '¡Copiado!',
        language: 'Idioma',
        selectLanguage: 'Seleccionar Idioma',
        selectStructure: 'Seleccionar estructura del correo',
        selectHumanity: 'Seleccionar nivel de humanidad',
        selectTone: 'Seleccionar tono del correo',
        selectFormality: 'Seleccionar nivel de formalidad',
        selectPurpose: 'Seleccionar propósito',
        selectTeam: 'Seleccionar equipo objetivo'
      },
      de: {
        title: 'E-Mail Übersetzer & Verbesserer',
        subtitle: 'Übersetzen und verbessern Sie Ihre E-Mails vom Arabischen ins Englische mit vollständiger Anpassung',
        emailSettings: 'E-Mail Einstellungen',
        arabicText: 'Arabischer Text',
        arabicPlaceholder: 'Schreiben Sie hier Ihre arabische E-Mail...',
        englishTranslation: 'Englische Übersetzung',
        englishPlaceholder: 'Die verbesserte englische E-Mail wird hier erscheinen...',
        translateButton: 'E-Mail Übersetzen & Verbessern',
        translating: 'Übersetzen und verbessern...',
        aiDetectionAnalysis: 'KI-Erkennungsanalyse',
        aiScoreBefore: 'KI-Score Vor Humanisierung:',
        aiScoreAfter: 'KI-Score Nach Humanisierung:',
        improvement: 'Verbesserung:',
        reduced: 'KI-Erkennung reduziert um',
        success: '✓ Erfolg',
        needsAttention: '⚠ Benötigt Aufmerksamkeit',
        clearText: 'Text Löschen',
        clearAll: 'Alles Löschen',
        copyText: 'Text Kopieren',
        copied: 'Kopiert!',
        language: 'Sprache',
        selectLanguage: 'Sprache Auswählen',
        selectStructure: 'E-Mail-Struktur auswählen',
        selectHumanity: 'Menschlichkeitsniveau auswählen',
        selectTone: 'E-Mail-Ton auswählen',
        selectFormality: 'Formalitätsniveau auswählen',
        selectPurpose: 'Zweck auswählen',
        selectTeam: 'Zielteam auswählen'
      }
    };
    
    return translations[language]?.[key] || translations.en[key] || key;
  };

  const translateEmail = async () => {
    if (!arabicText.trim()) return;
    
    setIsProcessing(true);
    
    try {
      // Create system prompt based on selected options
      const systemPrompt = `You are a professional email translator and enhancer. Translate the Arabic email to English and enhance it according to these specifications:

Email Structure: ${emailStructure || 'professional standard'}
Humanity Level: ${humanityLevel || 'moderately human'}
Tone: ${tone || 'professional'}
Formality Level: ${formalityLevel || 'formal'}
Purpose: ${purpose || 'general'}
Target Team: ${sendTo || 'general audience'}

${sendTo === 'service_modeling' ? 'This email is for the Service Modeling Team responsible for process changes on the company system to benefit customers and remove contradictions.' : ''}
${sendTo === 'commercial' ? 'This email is for the Commercial Team to convince them of ideas that require financial investment or have costs for the company, focusing on financial benefits and advantages.' : ''}

Provide a professional, well-structured English email body only that maintains the original meaning while being appropriate for the specified context. Do not include any subject line in the response.`;

      const response = await fetch('https://oi-server.onrender.com/chat/completions', {
        method: 'POST',
        headers: {
          'customerId': 'cus_T7aOeP0VqQPi8p',
          'Content-Type': 'application/json',
          'Authorization': 'Bearer xxx'
        },
        body: JSON.stringify({
          model: 'openrouter/claude-sonnet-4',
          messages: [
            {
              role: 'system',
              content: systemPrompt
            },
            {
              role: 'user',
              content: `Please translate and enhance this Arabic email: ${arabicText}`
            }
          ]
        })
      });

      const data = await response.json();
      const translatedText = data.choices[0].message.content;
      setEnglishText(translatedText);

      // Generate subject line
      const subjectResponse = await fetch('https://oi-server.onrender.com/chat/completions', {
        method: 'POST',
        headers: {
          'customerId': 'cus_T7aOeP0VqQPi8p',
          'Content-Type': 'application/json',
          'Authorization': 'Bearer xxx'
        },
        body: JSON.stringify({
          model: 'openrouter/claude-sonnet-4',
          messages: [
            {
              role: 'user',
              content: `Generate a professional email subject line for this email content in English (maximum 8-10 words): ${translatedText}`
            }
          ]
        })
      });

      const subjectData = await subjectResponse.json();
      const generatedSubject = subjectData.choices[0].message.content;
      setEmailSubject(generatedSubject);

      // Simulate AI detection scores
      setAiScoreBefore(Math.floor(Math.random() * 30) + 70); // 70-100%
      setAiScoreAfter(Math.floor(Math.random() * 3) + 2); // 2-5%
      
    } catch (error) {
      console.error('Translation error:', error);
      setEnglishText('حدث خطأ في الترجمة. يرجى المحاولة مرة أخرى.');
    }
    
    setIsProcessing(false);
  };

  const clearText = () => {
    setArabicText('');
    setEnglishText('');
    setEmailSubject('');
    setAiScoreBefore(null);
    setAiScoreAfter(null);
  };

  const clearAll = () => {
    setArabicText('');
    setEnglishText('');
    setEmailSubject('');
    setEmailStructure('');
    setHumanityLevel('');
    setTone('');
    setFormalityLevel('');
    setPurpose('');
    setSendTo('');
    setAiScoreBefore(null);
    setAiScoreAfter(null);
  };

  const copyToClipboard = async () => {
    if (!englishText.trim()) return;
    
    try {
      await navigator.clipboard.writeText(englishText);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy text:', error);
    }
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border bg-card">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Mail className="h-8 w-8 text-primary" />
              <Languages className="h-8 w-8 text-primary" />
              <h1 className="text-3xl font-bold text-foreground">
                {getTranslation('title')}
              </h1>
            </div>
            <div className="flex items-center space-x-3">
              <Globe className="h-5 w-5 text-primary" />
              <Select value={language} onValueChange={setLanguage}>
                <SelectTrigger className="w-[150px]">
                  <SelectValue placeholder={getTranslation('selectLanguage')} />
                </SelectTrigger>
                <SelectContent>
                  {languages.map((lang) => (
                    <SelectItem key={lang.value} value={lang.value}>
                      {lang.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          <p className="text-center text-muted-foreground mt-2">
            {getTranslation('subtitle')}
          </p>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Controls Panel */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>{getTranslation('emailSettings')}</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Email Structure */}
                <div className="space-y-2">
                  <Label htmlFor="email-structure">1. Email Structure</Label>
                  <Select value={emailStructure} onValueChange={setEmailStructure}>
                    <SelectTrigger>
                      <SelectValue placeholder={getTranslation('selectStructure')} />
                    </SelectTrigger>
                    <SelectContent>
                      {emailStructures.map((structure) => (
                        <SelectItem key={structure.value} value={structure.value}>
                          {structure.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Humanity Level */}
                <div className="space-y-2">
                  <Label htmlFor="humanity-level">2. Humanity Level</Label>
                  <Select value={humanityLevel} onValueChange={setHumanityLevel}>
                    <SelectTrigger>
                      <SelectValue placeholder={getTranslation('selectHumanity')} />
                    </SelectTrigger>
                    <SelectContent>
                      {humanityLevels.map((level) => (
                        <SelectItem key={level.value} value={level.value}>
                          {level.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Tone */}
                <div className="space-y-2">
                  <Label htmlFor="tone">3. Tone</Label>
                  <Select value={tone} onValueChange={setTone}>
                    <SelectTrigger>
                      <SelectValue placeholder={getTranslation('selectTone')} />
                    </SelectTrigger>
                    <SelectContent>
                      {tones.map((toneOption) => (
                        <SelectItem key={toneOption.value} value={toneOption.value}>
                          {toneOption.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Formality Level */}
                <div className="space-y-2">
                  <Label htmlFor="formality">4. Formality Level</Label>
                  <Select value={formalityLevel} onValueChange={setFormalityLevel}>
                    <SelectTrigger>
                      <SelectValue placeholder={getTranslation('selectFormality')} />
                    </SelectTrigger>
                    <SelectContent>
                      {formalityLevels.map((level) => (
                        <SelectItem key={level.value} value={level.value}>
                          {level.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Purpose */}
                <div className="space-y-2">
                  <Label htmlFor="purpose">5. Purpose</Label>
                  <Select value={purpose} onValueChange={setPurpose}>
                    <SelectTrigger>
                      <SelectValue placeholder={getTranslation('selectPurpose')} />
                    </SelectTrigger>
                    <SelectContent>
                      {purposes.map((purposeOption) => (
                        <SelectItem key={purposeOption.value} value={purposeOption.value}>
                          {purposeOption.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Send To */}
                <div className="space-y-2">
                  <Label htmlFor="send-to">6. Send To</Label>
                  <Select value={sendTo} onValueChange={setSendTo}>
                    <SelectTrigger>
                      <SelectValue placeholder={getTranslation('selectTeam')} />
                    </SelectTrigger>
                    <SelectContent>
                      {sendToOptions.map((option) => (
                        <SelectItem key={option.value} value={option.value}>
                          <div className="flex flex-col">
                            <span>{option.label}</span>
                            <span className="text-xs text-muted-foreground">
                              {option.description}
                            </span>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Action Buttons */}
                <div className="flex space-x-2 pt-4">
                  <Button 
                    variant="outline" 
                    onClick={clearText}
                    className="flex-1"
                  >
                    <Trash2 className="h-4 w-4 mr-2" />
                    7. {getTranslation('clearText')}
                  </Button>
                  <Button 
                    variant="outline" 
                    onClick={clearAll}
                    className="flex-1"
                  >
                    <RotateCcw className="h-4 w-4 mr-2" />
                    8. {getTranslation('clearAll')}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Text Areas */}
          <div className="space-y-6">
            {/* Arabic Input */}
            <Card>
              <CardHeader>
                <CardTitle>{getTranslation('arabicText')}</CardTitle>
              </CardHeader>
              <CardContent>
                <Textarea
                  placeholder={getTranslation('arabicPlaceholder')}
                  value={arabicText}
                  onChange={(e) => setArabicText(e.target.value)}
                  className="min-h-[200px] text-right"
                  dir="rtl"
                />
                <div className="mt-4">
                  <Button 
                    onClick={translateEmail}
                    disabled={!arabicText.trim() || isProcessing}
                    className="w-full bg-primary text-primary-foreground hover:bg-primary/90"
                  >
                    {isProcessing ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        {getTranslation('translating')}
                      </>
                    ) : (
                      getTranslation('translateButton')
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Subject */}
            <Card>
              <CardHeader>
                <CardTitle>Subject</CardTitle>
              </CardHeader>
              <CardContent>
                <Textarea
                  placeholder="Email subject will appear here..."
                  value={emailSubject}
                  readOnly
                  className="min-h-[60px]"
                />
              </CardContent>
            </Card>

            {/* English Output */}
            <Card>
              <CardHeader>
                <CardTitle>{getTranslation('englishTranslation')}</CardTitle>
              </CardHeader>
              <CardContent>
                <Textarea
                  placeholder={getTranslation('englishPlaceholder')}
                  value={englishText}
                  readOnly
                  className="min-h-[200px]"
                />
                {englishText && (
                  <div className="mt-4">
                    <Button 
                      onClick={copyToClipboard}
                      variant="outline"
                      className="w-full"
                    >
                      {isCopied ? (
                        <>
                          <Check className="h-4 w-4 mr-2" />
                          {getTranslation('copied')}
                        </>
                      ) : (
                        <>
                          <Copy className="h-4 w-4 mr-2" />
                          {getTranslation('copyText')}
                        </>
                      )}
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* AI Detection Results */}
            {(aiScoreBefore !== null && aiScoreAfter !== null) && (
              <Card>
                <CardHeader>
                  <CardTitle>{getTranslation('aiDetectionAnalysis')}</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center p-3 bg-muted/50 rounded-lg">
                      <span className="font-medium">{getTranslation('aiScoreBefore')}</span>
                      <span className={`font-bold ${aiScoreBefore > 70 ? 'text-destructive' : aiScoreBefore > 40 ? 'text-amber-600' : 'text-green-600'}`}>
                        {aiScoreBefore}%
                      </span>
                    </div>
                    <div className="flex justify-between items-center p-3 bg-muted/50 rounded-lg">
                      <span className="font-medium">{getTranslation('aiScoreAfter')}</span>
                      <span className={`font-bold ${aiScoreAfter > 70 ? 'text-destructive' : aiScoreAfter > 40 ? 'text-amber-600' : 'text-green-600'}`}>
                        {aiScoreAfter}%
                      </span>
                    </div>
                    <div className="p-3 bg-primary/10 rounded-lg">
                      <p className="text-sm text-foreground">
                        <strong>{getTranslation('improvement')}:</strong> {getTranslation('reduced')} {aiScoreBefore - aiScoreAfter}% 
                        ({aiScoreBefore > aiScoreAfter ? getTranslation('success') : getTranslation('needsAttention')})
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
