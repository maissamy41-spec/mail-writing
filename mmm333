import React, { useState, useEffect } from 'react';

interface ConversionSettings {
  tone: string;
  formality: string;
  purpose: string;
}

export default function ArabicEmailConverter() {
  const [inputText, setInputText] = useState('');
  const [convertedEmail, setConvertedEmail] = useState('');
  const [subject, setSubject] = useState('');
  const [recipient, setRecipient] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [aiScore, setAiScore] = useState<number | null>(null);
  const [humanScore, setHumanScore] = useState<number | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [settings, setSettings] = useState<ConversionSettings>({
    tone: 'professional',
    formality: 'formal',
    purpose: 'general'
  });
  const [emailStyle, setEmailStyle] = useState('six-sigma');
  const [humanityLevel, setHumanityLevel] = useState('95');
  const [sentTo, setSentTo] = useState('');
  const [currentUrl, setCurrentUrl] = useState('');

  useEffect(() => {
    if (typeof window !== 'undefined') {
      setCurrentUrl(window.location.href);
    }
  }, []);

  const tones = [
    { value: 'professional', label: 'Professional' },
    { value: 'friendly', label: 'Friendly' },
    { value: 'formal', label: 'Formal' },
    { value: 'persuasive', label: 'Persuasive' }
  ];

  const formalities = [
    { value: 'very-formal', label: 'Very Formal' },
    { value: 'formal', label: 'Formal' },
    { value: 'semi-formal', label: 'Semi-formal' },
    { value: 'casual', label: 'Casual' }
  ];

  const purposes = [
    { value: 'general', label: 'General' },
    { value: 'business', label: 'Business' },
    { value: 'inquiry', label: 'Inquiry' },
    { value: 'request', label: 'Request' },
    { value: 'complaint', label: 'Complaint' },
    { value: 'appreciation', label: 'Appreciation' }
  ];

  const emailStyles = [
    { value: 'six-sigma', label: 'Six Sigma Structure' },
    { value: 'storytelling', label: 'Storytelling Approach' },
    { value: 'executive-summary', label: 'Executive Summary' },
    { value: 'action-oriented', label: 'Action-Oriented' }
  ];

  const humanityLevels = [
    { value: '90', label: '90% Human-like' },
    { value: '95', label: '95% Human-like' },
    { value: '98', label: '98% Human-like' },
    { value: '99', label: '99% Human-like' }
  ];

  const callAPI = async (body: any) => {
    try {
      const response = await fetch('https://oi-server.onrender.com/chat/completions', {
        method: 'POST',
        headers: {
          'customerId': 'cus_T7aOeP0VqQPi8p',
          'Content-Type': 'application/json',
          'Authorization': 'Bearer xxx'
        },
        body: JSON.stringify(body)
      });
      if (!response.ok) throw new Error('API failed');
      return await response.json();
    } catch (error) {
      console.error('API Error:', error);
      // Fallback mock response for demo
      return {
        choices: [{
          message: {
            content: 'Dear Team,\n\nThis is a demo email generated from your Arabic input. In real mode, it would be AI-powered.\n\nBest,\nAssistant'
          }
        }]
      };
    }
  };

  const convertToProEmail = async () => {
    if (!inputText.trim()) {
      alert('Please enter Arabic text first!');
      return;
    }

    setIsLoading(true);
    setConvertedEmail('');
    setSubject('');
    setAiScore(null);
    setHumanScore(null);
    try {
      const getSystemPrompt = () => {
        const baseRequirements = `
CRITICAL: Make this email sound ${humanityLevel}% human-written with these techniques:
- Use natural, conversational language with slight imperfections
- Include personal touches and authentic expressions
- Vary sentence structure and length naturally
- Add subtle emotional cues and genuine concern
- Use informal contractions where appropriate (we'll, that's, it's)
- Include natural transitions and connecting phrases
- Sound like a real person writing, not an AI

Tone: ${settings.tone === 'professional' ? 'Professional but genuinely collaborative and approachable' : settings.tone === 'friendly' ? 'Warm, authentic, and naturally supportive' : settings.tone === 'formal' ? 'Respectfully formal but with human warmth' : 'Persuasive with genuine enthusiasm and natural conviction'}
Formality Level: ${settings.formality === 'very-formal' ? 'Very formal but with authentic human touch' : settings.formality === 'formal' ? 'Standard business formal with natural flow' : settings.formality === 'semi-formal' ? 'Professional but relaxed and genuinely approachable' : 'Casual, natural, and authentically conversational'}
Purpose: ${settings.purpose === 'business' ? 'Business communication with genuine concern and clear objectives' : settings.purpose === 'inquiry' ? 'Sincere information request with natural curiosity' : settings.purpose === 'request' ? 'Authentic request with clear reasoning' : settings.purpose === 'complaint' ? 'Genuine concern with constructive solution focus' : settings.purpose === 'appreciation' ? 'Heartfelt gratitude with specific acknowledgment' : 'Natural correspondence with clear, human purpose'}

${sentTo === 'service-modeling' ? 'IMPORTANT: This email is being sent to the Service Modeling Team who are responsible for process modifications on the wiki and reviewing them to ensure they do not conflict with other data, serve customers better, and do not oppose the company financially. Frame your communication accordingly with focus on process improvement, data consistency, and customer service enhancement.' : ''}

${sentTo === 'commercial' ? 'IMPORTANT: This email is being sent to the Commercial Team who always speak from a financial perspective. Frame your communication with emphasis on revenue impact, cost considerations, financial benefits, and business profitability. Include relevant financial data and ROI considerations.' : ''}`;

        if (emailStyle === 'six-sigma') {
          return `You are an expert professional email writer specializing in Six Sigma methodology and authentic human communication. Convert casual Arabic text into professional English emails that sound ${humanityLevel}% human-written.

STRUCTURE (Six Sigma Approach):
1. Professional Greeting: "Dears," or "Dear Team,"
2. Problem Statement: "Appreciate your support to check as we found..." 
3. Evidence Section: "Customer Verbatim:" with bullet points using "o" markers
4. Data/Samples Section: Structured data with metrics and examples
5. Recommendation Section: "Recommendation:" with actionable solutions using "o" markers

${baseRequirements}

Return only the professional English email with Six Sigma structure, no additional comments.`;
        }

        if (emailStyle === 'storytelling') {
          return `You are an expert email writer who uses storytelling techniques to create engaging, professional emails that sound ${humanityLevel}% human-written.

STRUCTURE (Storytelling Approach):
1. Engaging Opening: Start with a relatable scenario or context
2. The Challenge: Describe the situation with real examples and customer voices
3. The Journey: Walk through what happened with specific details
4. The Resolution: Present clear solutions with expected outcomes
5. Call to Action: Natural, compelling next steps

${baseRequirements}

Return only the professional English email with storytelling structure, no additional comments.`;
        }

        if (emailStyle === 'executive-summary') {
          return `You are an expert at writing executive-level communications that sound ${humanityLevel}% human-written and naturally professional.

STRUCTURE (Executive Summary Style):
1. Executive Summary: Brief overview of key points
2. Situation Analysis: Current state with supporting data
3. Impact Assessment: What this means for the business
4. Recommended Actions: Clear, prioritized next steps
5. Expected Outcomes: Measurable results and timeline

${baseRequirements}

Return only the professional English email with executive summary structure, no additional comments.`;
        }

        if (emailStyle === 'action-oriented') {
          return `You are an expert at writing action-focused emails that sound ${humanityLevel}% human-written and drive results.

STRUCTURE (Action-Oriented Style):
1. Clear Subject Context: Quick situation overview
2. Immediate Actions Required: What needs to happen now
3. Supporting Details: Background information and evidence
4. Timeline and Responsibilities: Who does what, when
5. Follow-up Plan: How we'll track progress

${baseRequirements}

Return only the professional English email with action-oriented structure, no additional comments.`;
        }

        return baseRequirements;
      };

      const data = await callAPI({
        model: 'openrouter/claude-sonnet-4',
        messages: [
          {
            role: 'system',
            content: getSystemPrompt()
          },
          {
            role: 'user',
            content: `Convert this Arabic text into a professional English email that sounds natural and human-written:\n\n${inputText}`
          }
        ],
        temperature: 0.7,
        max_tokens: 1500
      });

      const converted = data.choices[0]?.message?.content || '';
      setConvertedEmail(converted);

      // Analyze AI vs Human score
      if (converted) {
        setIsAnalyzing(true);
        try {
          const aiData = await callAPI({
            model: 'openrouter/claude-sonnet-4',
            messages: [
              {
                role: 'system',
                content: 'You are an AI detection expert. Analyze the given text and provide a percentage score (0-100) indicating how AI-generated it sounds. 0% means completely human-written, 100% means obviously AI-generated. Return only the percentage number without any explanation.'
              },
              {
                role: 'user',
                content: `Analyze this email for AI detection: ${converted}`
              }
            ],
            temperature: 0.3,
            max_tokens: 50
          });

          const aiPercentage = parseInt(aiData.choices[0]?.message?.content?.replace(/[^\d]/g, '') || '0');
          setAiScore(aiPercentage);

          // Humanize
          const humanData = await callAPI({
            model: 'openrouter/claude-sonnet-4',
            messages: [
              {
                role: 'system',
                content: 'You are an expert at humanizing AI-generated text. Take the given email and rewrite it to sound more natural, conversational, and human-like while maintaining the same message and structure. Add personal touches, natural language patterns, and human expressions. Keep it professional but authentic.'
              },
              {
                role: 'user',
                content: `Humanize this email to sound more natural: ${converted}`
              }
            ],
            temperature: 0.8,
            max_tokens: 1500
          });

          const humanizedText = humanData.choices[0]?.message?.content || '';
          setConvertedEmail(humanizedText);

          // Final AI score
          const finalData = await callAPI({
            model: 'openrouter/claude-sonnet-4',
            messages: [
              {
                role: 'system',
                content: 'You are an AI detection expert. Analyze the given text and provide a percentage score (0-100) indicating how AI-generated it sounds. 0% means completely human-written, 100% means obviously AI-generated. Return only the percentage number without any explanation.'
              },
              {
                role: 'user',
                content: `Analyze this email for AI detection: ${humanizedText}`
              }
            ],
            temperature: 0.3,
            max_tokens: 50
          });

          const humanPercentage = parseInt(finalData.choices[0]?.message?.content?.replace(/[^\d]/g, '') || '0');
          setHumanScore(humanPercentage);
        } catch (error) {
          console.error('Error analyzing text:', error);
          // Mock scores for demo
          setAiScore(75);
          setHumanScore(20);
        } finally {
          setIsAnalyzing(false);
        }
      }

      // Auto-generate subject
      if (!subject && converted) {
        const subjectData = await callAPI({
          model: 'openrouter/claude-sonnet-4',
          messages: [
            {
              role: 'system',
              content: 'Generate an appropriate and professional subject line for this English email. Return only the subject line without any additional comments.'
            },
            {
              role: 'user',
              content: converted
            }
          ],
          temperature: 0.5,
          max_tokens: 100
        });

        const generatedSubject = subjectData.choices[0]?.message?.content?.trim() || '';
        setSubject(generatedSubject);
      }

    } catch (error) {
      console.error('Error converting text:', error);
      alert('An error occurred while converting the text. Please try again.');
      // Fallback demo email
      setConvertedEmail(`Dear Team,

This is a fallback demo email. Your Arabic input: "${inputText.substring(0, 50)}...".

Recommendation: Review and improve processes.

Best regards,
Assistant`);
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      alert('Text copied successfully!');
    } catch (error) {
      console.error('Failed to copy:', error);
      alert('Failed to copy text');
    }
  };

  const resetForm = () => {
    setInputText('');
    setConvertedEmail('');
    setSubject('');
    setRecipient('');
    setAiScore(null);
    setHumanScore(null);
    setSentTo('');
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4" dir="rtl">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Mailing Writer
          </h1>
          <p className="text-lg text-gray-600">
            Transform your casual Arabic text into professional English emails that sound human-written
          </p>
          
        </div>

        <div className="grid lg:grid-cols-2 gap-6">
          {/* Input Section */}
          <div className="bg-white rounded-lg shadow-lg border p-6 h-fit">
            <div className="mb-4">
              <h3 className="text-xl font-semibold flex items-center gap-2 text-gray-900">
                📝 Your Arabic Text
              </h3>
              <p className="text-gray-600 text-sm mt-1">
                Write your message in Arabic as you normally would
              </p>
            </div>
            <div className="space-y-4">
              <textarea
                placeholder="Example: أريد أن أطلب إجازة من العمل لمدة أسبوع... أو مشكلة في النظام تحتاج حل عاجل..."
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                className="w-full min-h-40 text-right p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                dir="rtl"
              />

              {/* Settings */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Email Structure</label>
                  <select 
                    value={emailStyle} 
                    onChange={(e) => setEmailStyle(e.target.value)}
                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {emailStyles.map((style) => (
                      <option key={style.value} value={style.value}>
                        {style.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Humanity Level</label>
                  <select 
                    value={humanityLevel} 
                    onChange={(e) => setHumanityLevel(e.target.value)}
                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {humanityLevels.map((level) => (
                      <option key={level.value} value={level.value}>
                        {level.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Tone</label>
                  <select 
                    value={settings.tone} 
                    onChange={(e) => setSettings({...settings, tone: e.target.value})}
                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {tones.map((tone) => (
                      <option key={tone.value} value={tone.value}>
                        {tone.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Formality Level</label>
                  <select 
                    value={settings.formality} 
                    onChange={(e) => setSettings({...settings, formality: e.target.value})}
                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {formalities.map((formality) => (
                      <option key={formality.value} value={formality.value}>
                        {formality.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Purpose</label>
                  <select 
                    value={settings.purpose} 
                    onChange={(e) => setSettings({...settings, purpose: e.target.value})}
                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {purposes.map((purpose) => (
                      <option key={purpose.value} value={purpose.value}>
                        {purpose.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Send To</label>
                  <select 
                    value={sentTo} 
                    onChange={(e) => setSentTo(e.target.value)}
                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Select Team</option>
                    <option value="service-modeling">Service Modeling Team</option>
                    <option value="commercial">Commercial Team</option>
                  </select>
                </div>

                <div className="flex items-end">
                  <button 
                    onClick={() => setInputText('')}
                    className="w-full bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg font-medium"
                  >
                    🧹 Clear Text
                  </button>
                </div>
              </div>

              <div className="flex gap-2">
                <button 
                  onClick={convertToProEmail} 
                  disabled={!inputText.trim() || isLoading || isAnalyzing}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg font-medium"
                >
                  {isLoading ? '🔄 Converting...' : isAnalyzing ? '🧠 Analyzing...' : '✨ Convert to Professional Email'}
                </button>
                <button onClick={resetForm} className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg font-medium">
                  🔄 Clear All
                </button>
              </div>
            </div>
          </div>

          {/* Output Section */}
          <div className="bg-white rounded-lg shadow-lg border p-6 h-fit">
            <div className="mb-4">
              <h3 className="text-xl font-semibold flex items-center gap-2 text-gray-900">
                ✉️ Professional English Email
              </h3>
              <p className="text-gray-600 text-sm mt-1">
                Your polished, human-sounding result
              </p>
            </div>
            <div className="space-y-4">
              {/* Email Headers */}
              <div className="space-y-3 p-4 bg-gray-100 rounded-lg">
                <div className="flex gap-2">
                  <label className="min-w-fit text-sm font-medium text-gray-700 mt-2">To:</label>
                  <input
                    type="text"
                    placeholder="recipient@example.com"
                    value={recipient}
                    onChange={(e) => setRecipient(e.target.value)}
                    className="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div className="flex gap-2">
                  <label className="min-w-fit text-sm font-medium text-gray-700 mt-2">Subject:</label>
                  <input
                    type="text"
                    placeholder="Email subject"
                    value={subject}
                    onChange={(e) => setSubject(e.target.value)}
                    className="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              {/* Email Body */}
              <div className="space-y-3">
                <label className="block text-sm font-medium text-gray-700">Email Content:</label>
                <textarea
                  value={convertedEmail}
                  onChange={(e) => setConvertedEmail(e.target.value)}
                  className="w-full min-h-60 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-sans"
                  placeholder="Your converted professional email will appear here..."
                />
              </div>

              {convertedEmail && (
                <>
                  {/* AI Detection Results */}
                  {(aiScore !== null || humanScore !== null || isAnalyzing) && (
                    <div className="p-4 bg-accent rounded-lg space-y-3">
                      <h4 className="font-semibold text-accent-foreground">🎯 Humanization Analysis</h4>
                      {isAnalyzing ? (
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <div className="animate-spin">⚙️</div>
                          Analyzing text for human-like quality...
                        </div>
                      ) : (
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          {aiScore !== null && (
                            <div className="space-y-1">
                              <div className="text-muted-foreground">Initial AI Score:</div>
                              <div className={`font-semibold ${aiScore > 70 ? 'text-destructive' : aiScore > 40 ? 'text-yellow-600' : 'text-green-600'}`}>
                                {Math.round(aiScore)}% AI-like
                              </div>
                            </div>
                          )}
                          {humanScore !== null && (
                            <div className="space-y-1">
                              <div className="text-muted-foreground">After Humanization:</div>
                              <div className={`font-semibold ${humanScore > 70 ? 'text-destructive' : humanScore > 40 ? 'text-yellow-600' : 'text-green-600'}`}>
                                {Math.round(humanScore)}% AI-like
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                      {aiScore !== null && humanScore !== null && (
                        <div className="text-sm text-primary font-medium">
                          ✨ Improvement: {Math.round(aiScore - humanScore)}% more human-like
                        </div>
                      )}
                    </div>
                  )}

                  <div className="flex gap-2">
                    <button 
                      onClick={() => copyToClipboard(`To: ${recipient}\nSubject: ${subject}\n\n${convertedEmail}`)}
                      className="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium"
                    >
                      📋 Copy Complete Email
                    </button>
                    <button 
                      onClick={() => copyToClipboard(convertedEmail)}
                      className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg font-medium"
                    >
                      📄 Copy Content Only
                    </button>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>

        {/* Instructions */}
        <div className="bg-white rounded-lg shadow-lg border p-6 mt-6">
          <div className="mb-4">
            <h3 className="text-xl font-semibold text-gray-900">How to Use</h3>
          </div>
          <div>
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold mb-2 text-primary">Steps to Use:</h4>
                <ol className="space-y-1 text-sm text-muted-foreground list-decimal list-inside">
                  <li>Write your text in Arabic in the left box</li>
                  <li>Choose the appropriate tone, formality level, and purpose</li>
                  <li>Click "Convert to Professional Email"</li>
                  <li>Review and edit the result if needed</li>
                  <li>Copy the email and use it</li>
                </ol>
              </div>
              <div>
                <h4 className="font-semibold mb-2 text-primary">Email Converter Features:</h4>
                <ul className="space-y-1 text-sm text-muted-foreground list-disc list-inside">
                  <li>Multiple email structures (Six Sigma, Storytelling, Executive, Action-oriented)</li>
                  <li>Adjustable humanity level (90-99%)</li>
                  <li>AI-to-Human text transformation</li>
                  <li>Real-time humanization scoring</li>
                  <li>Professional formatting with data structure</li>
                  <li>Auto-generates subjects and handles Arabic input</li>
                  <li>Clear action items and recommendations</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
